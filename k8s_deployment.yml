---
- name: kubernetes deployment
  hosts: all 
  gather_facts: true
  tasks:
    - name: Disable swap on all nodes
      shell: swapoff -a && sed -i '/ swap / s/^/#/' /etc/fstab
    
    - name: Add all neccessary port to firewall on all nodes
      shell: |
        firewall-cmd --permanent --add-port=6443/tcp 
        firewall-cmd --permanent --add-port=10250-10252/tcp 
        firewall-cmd --permanent --add-port=2379-2380/tcp 
        firewall-cmd --permanent --add-port=30000-32767/tcp 
        firewall-cmd --reload
    
    - name: add modules
      shell: |
        cat<<EOF | tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF
        modprobe overlay && modprobe br_netfilter
    
    - name: Enable ip forwarding
      shell: |
        cat<<EOF | tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables=1
        net.ipv4.ip_forward=1
        net.bridge.bridge-nf-call-ip6tables=1
        EOF
        sysctl --system

    - name: Create CRI-O repo on all nodes
      shell: | 
        CRIO_VERSION=v1.28
        cat <<EOF | tee /etc/yum.repos.d/cri-o.repo
        [cri-o]
        name=CRI-O
        baseurl=https://download.opensuse.org/repositories/isv:/cri-o:/stable:/$CRIO_VERSION/rpm/
        enabled=1
        gpgcheck=1
        gpgkey=https://download.opensuse.org/repositories/isv:/cri-o:/stable:/$CRIO_VERSION/rpm/repodata/repomd.xml.key
        EOF

    - name: Install CRIO
      shell: dnf install cri-o -y && systemctl enable --now crio
    
    - name: Status of CRIO
      shell: systemctl status crio
      register: crio_status

    - name: display
      debug:
        msg: "{{crio_status}}"
    
    - name: Create kubernetes repo on all nodes
      shell: | 
        KUBERNETES_VERSION=v1.28

        cat <<EOF | tee /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/rpm/
        enabled=1
        gpgcheck=1
        gpgkey=https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/rpm/repodata/repomd.xml.key
        EOF
    
    - name: Install kubectl, kubeadm and kubelet
      shell: dnf install -y kubelet kubeadm kubectl && systemctl enable --now kubelet
    
    - name: wait for 1 min
      wait_for: 
        timeout: 60

    - name: Intialize the master node
      shell: "kubeadm init --pod-network-cidr=192.168.10.0/16 --control-plane-endpoint={{ ansible_host }}"
      register: kubeadm
      when: "'master' in group_names"
    
    - name: Status of intialization
      debug:
        msg: "{{ kubeadm }}"
      when: "'master' in group_names"

    - name: Get command to join worked
      shell: kubeadm token create --print-join-command
      register: join_worker
      when: "'master' in group_names"
    
    - name: Display the kubeadm join command
      debug:
        var: join_worker.stdout

    - name: Setup kube config 
      shell: | 
        mkdir -p ~/.kube
        cp -i /etc/kubernetes/admin.conf ~/.kube/config
        chown $(id -u):$(id -g) ~/.kube/config
      when: "'master' in group_names"
    
    - name: Install calico 
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      when: "'master' in group_names"

    - name: Add calico port in firewall
      shell: firewall-cmd --add-port=179/tcp --permanent && firewall-cmd --reload
      when: "'master' in group_names"
 
    - name: Join worker node
      shell: "{{ hostvars['master']['join_worker'].stdout }} --cri-socket /var/run/crio/crio.sock"
      when: "'worker' in group_names"
    
    - name: Setup kube config on worker nodes
      shell: |
        mkdir ~/.kube
        cp /etc/kubernetes/kubelet.conf  ~/.kube/config
        systemctl restart kubelet
      when: "'worker' in group_names"

    - name: Check cluster status from all nodes
      shell: kubectl get nodes -o wide
      register: cluster_status
    
    - name: Display status of cluster
      debug:
        msg: "{{ cluster_status.stdout_lines }}"
    
    - name: wait for 15 sec
      wait_for: 
        timeout: 15
        
    - name: Check all kube-system namespace pods status
      shell: kubectl get po -n kube-system -o wide
      register: pods_status
    
    - name: Display pods status
      debug:
        msg: "{{ pods_status.stdout_lines }}"
    




    